We are building a JavaFX application that can get movie times, concert times, sport event times, and more from the internet and store them in the application. The user can then use the application to orgnaize these events.

- added Events.java which is designed to get movie times off a specified movie theater website

- added Movie.java to store the movie data

- added Main.java that contains JavaFX GUI code

- Test.java is temporary

12/3/2019:

- Added the Attributes class to load / save attributes & settings of the program, like the title and whether or not events have already been loaded in

- Added the Event class which both stores event data and collects the data from the web using the jsoup API

- Added the EventLibrary class which stores all events and provides methods for accessing certain subsets of the events (like a List<Event> which only contains movies, etc.)

- Added the EventType enum which is used to label an event object as a particular type - MOVIE, CONCERT, etc.

- Added the abstract View class which serves as the common class holding together the hierarchy of View objects like EventView, SearchView, etc., that form the main GUI system

- Added the EventView class, a View object that is used to store a list of Events and display them in an adjacent GridPane display

- Added the SearchView class, a View object which has a web browser that can be used to search the internet and add events to the EventLibrary

- Added the SettingsView class, a View object which is used to display / alter user settings

- Added the Screen class which loads up the JavaFX GUI and holds all of the individual View instances added to it as well as the the ButtonBar toolbar

- Modified the code within Main.java to fit the new classes which have been added

12/4/2019:

- Added the CloutTest class which will include methods to calculate the "clout", or popularity of an event; furthermore, the Event class was updated so that Event objects can now have more attributes

- Modified the EventView class, adding functionality to draw onto the screen and to display Event objects retrieved from the EventLibrary class

- Made minor changes to Main.java

- Modified SettingsView and SearchView, drastically improving the UI of the SearchView and adding functionalty to the Settings screen

- Added 2 abstract methods to the View class, implementing their functionality in all View subclasses (EventView, SearchView, SettingsView)

12/5/2019:

- Added the User class which stores all users and their associated data

- Added the EventLoader class which loads a specific User's event data from a user specific text file

- Updated the GUI significantly and added other minor changes

12/9/2019:

- Added the SpecialEvents class, which is intended to store user added events, as well as new enums types for Events

- Added more links

12/9/2019:

- Added the UserManager class, which now contains User class the within it and loads up / saves user data

- Added the Encryption class, which is a helper class designed to encrypt strings (for protecting saved user data)

- Added the EventManager class, which now contains the Event class within it and handles the loading of events from URLs

	- ***EventManger initializes on a separate Thread to reduce load times

- Added the ViewType enum within the View class

- Removed EventLibrary.java and EventLoader.java as their functions are now handled by EventManager and UserManager respectively

- Made changes to some of the GUI / View classes (HomeView, EventView, SearchView, SettingsView); Users can now use a username & password

- Other bug fixes

12/10/2019:

- Made changes to the View class

- Moved the toolbar back to the Screen class

- Minor changes to the View subclasses (HomeView, EventView, SearchView, SettingsView)

- Minor changes to the EventManager class

- Other minor changes / GUI improvement

- Added javadoc and other comments to some of the classes

12/15/2019:

- More GUI improvements

- Added code to EventManager.java & UserManager.java that allows users to save events that thye are attending